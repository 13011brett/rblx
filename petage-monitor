--[[
    Enhanced Pet Age Monitor with Selective Monitoring
    Features: Mutation detection, selective pet monitoring, improved GUI
]]

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local targetAge = 50
local isMonitoring = false
local monitorConnection
local lastNotifiedPets = {}
local selectedPets = {} -- UUIDs of pets to monitor
local allPetsData = {} -- Cache of all detected pets

-- Mutation data from decompiled PetMutationRegistry
local mutations = {
    "Shocked", "Golden", "Rainbow", "Shiny", "Windy", "Frozen", "Inverted", 
    "Mega", "Tiny", "IronSkin", "Radiant", "Ascended", "Tranquil", 
    "Corrupted", "Fried", "Aromatic", "Silver", "GiantBean"
}

print("=== ENHANCED PET AGE MONITOR ===")

-- Function to read pet data from ActivePetUI and Backpack
local function readActivePets()
    local pets = {}
    
    -- Method 1: Check ActivePetUI (equipped pets)
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        local scrollingFrame = activePetUI
        for _, pathPart in pairs({"Frame", "Main", "PetDisplay", "ScrollingFrame"}) do
            scrollingFrame = scrollingFrame:FindFirstChild(pathPart)
            if not scrollingFrame then break end
        end
        
        if scrollingFrame then
            for _, child in pairs(scrollingFrame:GetChildren()) do
                if string.match(child.Name, "{.*%-.*%-.*%-.*%-.*}") then
                    local petAge, petName, petType
                    
                    local main = child:FindFirstChild("Main")
                    if main then
                        local item = main:FindFirstChild("Item")
                        if item then
                            petAge = item:FindFirstChild("PET_AGE")
                            petName = item:FindFirstChild("PET_NAME")
                            petType = item:FindFirstChild("PET_TYPE")
                        end
                    end
                    
                    if petAge and petAge:IsA("TextLabel") then
                        local ageText = petAge.Text
                        local ageNum = tonumber(string.match(ageText, "%d+")) or 0
                        local petNameText = petName and petName.Text or "Unknown"
                        local petTypeText = petType and petType.Text or "Unknown"
                        
                        -- Extract mutation
                        local mutation = "Normal"
                        local actualType = petTypeText
                        
                        for _, mut in pairs(mutations) do
                            if string.find(petTypeText, "^" .. mut .. " ") then
                                mutation = mut
                                actualType = string.gsub(petTypeText, "^" .. mut .. " ", "")
                                break
                            end
                        end
                        
                        pets[child.Name] = {
                            uuid = child.Name,
                            age = ageNum,
                            name = petNameText,
                            type = actualType,
                            mutation = mutation,
                            fullType = petTypeText,
                            location = "Equipped",
                            selected = selectedPets[child.Name] or false
                        }
                    end
                end
            end
        end
    end
    
    -- Method 2: Check Backpack (inventory pets)
    if LocalPlayer.Backpack then
        for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                -- Try to extract age from tool name or attributes
                local toolName = tool.Name
                local ageMatch = string.match(toolName, "%[(%d+%.%d+) KG%] %[Age (%d+)%]")
                
                if ageMatch then
                    local _, ageNum = string.match(toolName, "%[(%d+%.%d+) KG%] %[Age (%d+)%]")
                    ageNum = tonumber(ageNum) or 0
                    
                    -- Extract pet name and mutation from tool name
                    -- Format: "Mutation PetType [Weight] [Age]"
                    local nameAndType = string.match(toolName, "^(.+) %[%d+%.%d+ KG%]")
                    if nameAndType then
                        local mutation = "Normal"
                        local petType = nameAndType
                        
                        -- Check for mutations
                        for _, mut in pairs(mutations) do
                            if string.find(nameAndType, "^" .. mut .. " ") then
                                mutation = mut
                                petType = string.gsub(nameAndType, "^" .. mut .. " ", "")
                                break
                            end
                        end
                        
                        local uuid = "BACKPACK_" .. tool:GetDebugId() -- Generate unique ID
                        
                        pets[uuid] = {
                            uuid = uuid,
                            age = ageNum,
                            name = petType, -- Using type as name for backpack pets
                            type = petType,
                            mutation = mutation,
                            fullType = nameAndType,
                            location = "Backpack",
                            toolRef = tool,
                            selected = selectedPets[uuid] or false
                        }
                    end
                end
            end
        end
    end
    
    allPetsData = pets
    return pets
end

-- Function to check selected pets for target age
local function checkSelectedPets()
    local pets = readActivePets()
    local alerts = {}
    
    for uuid, pet in pairs(pets) do
        if selectedPets[uuid] and pet.age >= targetAge then
            local key = uuid .. "_" .. pet.age
            if not lastNotifiedPets[key] then
                lastNotifiedPets[key] = true
                local message = string.format("%s (%s %s) reached age %d!", 
                    pet.name, pet.mutation, pet.type, pet.age)
                table.insert(alerts, message)
            end
        end
    end
    
    return alerts
end

-- Function to show notification
local function showNotification(message)
    local notification = Instance.new("ScreenGui", game.CoreGui)
    notification.Name = "PetAgeAlert"
    
    local frame = Instance.new("Frame", notification)
    frame.Size = UDim2.fromOffset(500, 120)
    frame.Position = UDim2.new(0.5, -250, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    
    local corner = Instance.new("UICorner", frame)
    corner.CornerRadius = UDim.new(0, 10)
    
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, -20, 1, -20)
    label.Position = UDim2.new(0, 10, 0, 10)
    label.BackgroundTransparency = 1
    label.Text = message
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.TextWrapped = true
    label.Font = Enum.Font.GothamBold
    
    frame:TweenPosition(UDim2.new(0.5, -250, 0.15, 0), "Out", "Back", 0.5)
    game:GetService("Debris"):AddItem(notification, 8)
    
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxasset://sounds/electronicpingshort.wav"
    sound.Volume = 1
    sound.Parent = game.Workspace
    sound:Play()
    sound.Ended:Connect(function() sound:Destroy() end)
end

-- Create main GUI
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.ResetOnSpawn = false
gui.Name = "EnhancedPetMonitor"

local mainFrame = Instance.new("Frame", gui)
mainFrame.Size = UDim2.fromOffset(500, 400)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainFrame.Active = true
mainFrame.Draggable = true

local corner = Instance.new("UICorner", mainFrame)
corner.CornerRadius = UDim.new(0, 12)

-- Title
local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0.1, 0)
title.BackgroundTransparency = 1
title.Text = "Enhanced Pet Age Monitor"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.GothamBold
title.TextScaled = true

-- Control buttons frame
local controlFrame = Instance.new("Frame", mainFrame)
controlFrame.Size = UDim2.new(1, -20, 0.15, 0)
controlFrame.Position = UDim2.new(0, 10, 0.12, 0)
controlFrame.BackgroundTransparency = 1

local refreshBtn = Instance.new("TextButton", controlFrame)
refreshBtn.Size = UDim2.new(0.3, -5, 1, 0)
refreshBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
refreshBtn.Text = "Refresh Pets"
refreshBtn.TextColor3 = Color3.new(1, 1, 1)
refreshBtn.Font = Enum.Font.GothamBold
refreshBtn.TextScaled = true

local monitorBtn = Instance.new("TextButton", controlFrame)
monitorBtn.Size = UDim2.new(0.35, -5, 1, 0)
monitorBtn.Position = UDim2.new(0.35, 0, 0, 0)
monitorBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
monitorBtn.Text = "Start Monitor"
monitorBtn.TextColor3 = Color3.new(1, 1, 1)
monitorBtn.Font = Enum.Font.GothamBold
monitorBtn.TextScaled = true

local selectAllBtn = Instance.new("TextButton", controlFrame)
selectAllBtn.Size = UDim2.new(0.3, -5, 1, 0)
selectAllBtn.Position = UDim2.new(0.7, 5, 0, 0)
selectAllBtn.BackgroundColor3 = Color3.fromRGB(150, 100, 200)
selectAllBtn.Text = "Select All"
selectAllBtn.TextColor3 = Color3.new(1, 1, 1)
selectAllBtn.Font = Enum.Font.GothamBold
selectAllBtn.TextScaled = true

-- Add corners to control buttons
for _, btn in pairs({refreshBtn, monitorBtn, selectAllBtn}) do
    local btnCorner = Instance.new("UICorner", btn)
    btnCorner.CornerRadius = UDim.new(0, 6)
end

-- Pet list scrolling frame
local scrollFrame = Instance.new("ScrollingFrame", mainFrame)
scrollFrame.Size = UDim2.new(1, -20, 0.65, 0)
scrollFrame.Position = UDim2.new(0, 10, 0.3, 0)
scrollFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
scrollFrame.BorderSizePixel = 0
scrollFrame.CanvasSize = UDim2.fromOffset(0, 0)
scrollFrame.ScrollBarThickness = 8

local scrollCorner = Instance.new("UICorner", scrollFrame)
scrollCorner.CornerRadius = UDim.new(0, 8)

local listLayout = Instance.new("UIListLayout", scrollFrame)
listLayout.Padding = UDim.new(0, 5)
listLayout.SortOrder = Enum.SortOrder.Name

-- Status label
local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, 0, 0.08, 0)
statusLabel.Position = UDim2.new(0, 0, 0.92, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "Open pet menu, then click Refresh Pets"
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextScaled = true

-- Function to create pet entry
local function createPetEntry(uuid, petData)
    local entry = Instance.new("Frame", scrollFrame)
    entry.Size = UDim2.new(1, -10, 0, 50)
    entry.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    entry.Name = uuid
    
    local entryCorner = Instance.new("UICorner", entry)
    entryCorner.CornerRadius = UDim.new(0, 6)
    
    local checkbox = Instance.new("TextButton", entry)
    checkbox.Size = UDim2.new(0, 30, 0, 30)
    checkbox.Position = UDim2.new(0, 10, 0.5, -15)
    checkbox.BackgroundColor3 = selectedPets[uuid] and Color3.fromRGB(0, 200, 100) or Color3.fromRGB(100, 100, 100)
    checkbox.Text = selectedPets[uuid] and "✓" or ""
    checkbox.TextColor3 = Color3.new(1, 1, 1)
    checkbox.Font = Enum.Font.GothamBold
    checkbox.TextScaled = true
    
    local checkCorner = Instance.new("UICorner", checkbox)
    checkCorner.CornerRadius = UDim.new(0, 4)
    
    local petLabel = Instance.new("TextLabel", entry)
    petLabel.Size = UDim2.new(1, -130, 1, 0)
    petLabel.Position = UDim2.new(0, 50, 0, 0)
    petLabel.BackgroundTransparency = 1
    petLabel.Text = string.format("%s (%s %s) - Age: %d [%s]", 
        petData.name, petData.mutation, petData.type, petData.age, petData.location)
    petLabel.TextColor3 = Color3.new(1, 1, 1)
    petLabel.Font = Enum.Font.Gotham
    petLabel.TextScaled = true
    petLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Color code by mutation
    if petData.mutation == "Golden" then
        petLabel.TextColor3 = Color3.fromRGB(255, 225, 0)
    elseif petData.mutation == "Rainbow" then
        petLabel.TextColor3 = Color3.fromRGB(4, 175, 236)
    elseif petData.mutation == "Shiny" then
        petLabel.TextColor3 = Color3.fromRGB(145, 207, 221)
    end
    
    checkbox.MouseButton1Click:Connect(function()
        selectedPets[uuid] = not selectedPets[uuid]
        checkbox.BackgroundColor3 = selectedPets[uuid] and Color3.fromRGB(0, 200, 100) or Color3.fromRGB(100, 100, 100)
        checkbox.Text = selectedPets[uuid] and "✓" or ""
    end)
    
    return entry
end

-- Function to refresh pet list
local function refreshPetList()
    -- Clear existing entries
    for _, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    local pets = readActivePets()
    local count = 0
    
    for uuid, petData in pairs(pets) do
        createPetEntry(uuid, petData)
        count = count + 1
    end
    
    -- Update canvas size
    scrollFrame.CanvasSize = UDim2.fromOffset(0, count * 55)
    statusLabel.Text = string.format("Found %d pets. Target age: %d", count, targetAge)
end

-- Button events
refreshBtn.MouseButton1Click:Connect(refreshPetList)

selectAllBtn.MouseButton1Click:Connect(function()
    local allSelected = true
    for uuid, _ in pairs(allPetsData) do
        if not selectedPets[uuid] then
            allSelected = false
            break
        end
    end
    
    -- Toggle all
    for uuid, _ in pairs(allPetsData) do
        selectedPets[uuid] = not allSelected
    end
    
    refreshPetList() -- Refresh to update checkboxes
    selectAllBtn.Text = allSelected and "Select All" or "Deselect All"
end)

monitorBtn.MouseButton1Click:Connect(function()
    if not isMonitoring then
        isMonitoring = true
        monitorBtn.Text = "Stop Monitor"
        monitorBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
        
        local selectedCount = 0
        for _ in pairs(selectedPets) do
            if selectedPets[_] then selectedCount = selectedCount + 1 end
        end
        
        statusLabel.Text = string.format("Monitoring %d pets for age %d", selectedCount, targetAge)
        
        local lastCheck = tick()
        monitorConnection = RunService.Heartbeat:Connect(function()
            if tick() - lastCheck >= 10 then
                lastCheck = tick()
                local alerts = checkSelectedPets()
                for _, alert in pairs(alerts) do
                    print("ALERT: " .. alert)
                    showNotification(alert)
                end
            end
        end)
    else
        isMonitoring = false
        monitorBtn.Text = "Start Monitor"
        monitorBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
        statusLabel.Text = "Monitoring stopped"
        
        if monitorConnection then
            monitorConnection:Disconnect()
            monitorConnection = nil
        end
    end
end)

print("Enhanced Pet Age Monitor loaded!")
print("1. Open your pet menu in-game")
print("2. Click 'Refresh Pets' to load your pets")
print("3. Select pets you want to monitor")
print("4. Click 'Start Monitor' to begin monitoring")
print("Target age:", targetAge)
