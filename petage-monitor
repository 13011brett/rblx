--[[
    Pet Age Monitor - Correct Path
    Uses the exact path: ActivePetUI â†’ Frame â†’ Main â†’ PetDisplay â†’ ScrollingFrame â†’ UUIDs
]]

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local targetAge = 50
local isMonitoring = false
local monitorConnection
local lastNotifiedPets = {}

print("=== PET AGE MONITOR - CORRECT PATH ===")

-- Function to read pet data from ActivePetUI using the correct path
local function readActivePets()
    -- Follow exact path: ActivePetUI â†’ Frame â†’ Main â†’ PetDisplay â†’ ScrollingFrame
    local activePetUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
    if not activePetUI then
        print("ActivePetUI not found in PlayerGui")
        return {}
    end
    
    local frame = activePetUI:FindFirstChild("Frame")
    if not frame then
        print("Frame not found in ActivePetUI")
        return {}
    end
    
    local main = frame:FindFirstChild("Main")
    if not main then
        print("Main not found in Frame")
        return {}
    end
    
    local petDisplay = main:FindFirstChild("PetDisplay")
    if not petDisplay then
        print("PetDisplay not found in Main")
        return {}
    end
    
    local scrollingFrame = petDisplay:FindFirstChild("ScrollingFrame")
    if not scrollingFrame then
        print("ScrollingFrame not found in PetDisplay")
        return {}
    end
    
    print("Successfully navigated to ScrollingFrame")
    
    local pets = {}
    
    -- Now look for UUID folders directly in ScrollingFrame
    for _, child in pairs(scrollingFrame:GetChildren()) do
        -- Check if this looks like a UUID (contains curly braces and dashes)
        if string.match(child.Name, "{.*%-.*%-.*%-.*%-.*}") then
            print(string.format("Found UUID folder: %s", child.Name))
            
            -- Try to find PET_AGE TextLabel and mutation info in this UUID folder
            local petAge, petName, petType, petMutation
            
            -- Method 1: Look in Main/Item structure
            local main = child:FindFirstChild("Main")
            if main then
                local item = main:FindFirstChild("Item")
                if item then
                    petAge = item:FindFirstChild("PET_AGE")
                    petName = item:FindFirstChild("PET_NAME")
                    petType = item:FindFirstChild("PET_TYPE")
                    
                    -- Look for mutation-related labels
                    petMutation = item:FindFirstChild("PET_MUTATION") or 
                                item:FindFirstChild("MUTATION") or
                                item:FindFirstChild("PET_RARITY") or
                                item:FindFirstChild("RARITY")
                    
                    print(string.format("  Checking Main/Item structure..."))
                end
            end
            
            -- Method 2: Look directly in UUID folder
            if not petAge then
                petAge = child:FindFirstChild("PET_AGE")
                petName = child:FindFirstChild("PET_NAME")
                petType = child:FindFirstChild("PET_TYPE")
                
                -- Look for mutation-related labels
                petMutation = child:FindFirstChild("PET_MUTATION") or 
                            child:FindFirstChild("MUTATION") or
                            child:FindFirstChild("PET_RARITY") or
                            child:FindFirstChild("RARITY")
                
                print(string.format("  Checking direct children..."))
            end
            
            -- Method 3: Recursive search (in case structure is deeper)
            if not petAge then
                local function findPetAgeRecursive(parent, depth)
                    if depth > 5 then return nil, nil, nil, nil end
                    
                    for _, subChild in pairs(parent:GetChildren()) do
                        if subChild.Name == "PET_AGE" and subChild:IsA("TextLabel") then
                            print(string.format("    Found PET_AGE at depth %d in %s", depth, parent.Name))
                            local foundName = subChild.Parent:FindFirstChild("PET_NAME")
                            local foundType = subChild.Parent:FindFirstChild("PET_TYPE")
                            
                            -- Look for mutation in same parent
                            local foundMutation = subChild.Parent:FindFirstChild("PET_MUTATION") or 
                                                subChild.Parent:FindFirstChild("MUTATION") or
                                                subChild.Parent:FindFirstChild("PET_RARITY") or
                                                subChild.Parent:FindFirstChild("RARITY")
                            
                            return subChild, foundName, foundType, foundMutation
                        end
                        
                        if subChild:IsA("GuiObject") then
                            local foundAge, foundName, foundType, foundMutation = findPetAgeRecursive(subChild, depth + 1)
                            if foundAge then
                                return foundAge, foundName, foundType, foundMutation
                            end
                        end
                    end
                    return nil, nil, nil, nil
                end
                
                petAge, petName, petType, petMutation = findPetAgeRecursive(child, 0)
            end
            
            -- If we found PET_AGE, extract the data
            if petAge and petAge:IsA("TextLabel") then
                local ageText = petAge.Text
                -- Extract number from text like "Age: 32"
                local ageNum = tonumber(string.match(ageText, "%d+")) or 0
                
                local petInfo = {
                    uuid = child.Name,
                    age = ageNum,
                    name = petName and petName.Text or "Unknown",
                    type = petType and petType.Text or "Unknown",
                    mutation = petMutation and petMutation.Text or "None",
                    ageText = ageText
                }
                
                table.insert(pets, petInfo)
                print(string.format("  SUCCESS: %s (%s) - Age: %d - Mutation: %s", 
                    petInfo.name, petInfo.type, petInfo.age, petInfo.mutation))
            else
                print(string.format("  Could not find PET_AGE TextLabel in %s", child.Name))
                
                -- Debug: List all children to help troubleshoot
                print("  Children of this UUID folder:")
                local function listChildren(parent, indent)
                    for _, subChild in pairs(parent:GetChildren()) do
                        print(string.format("%s%s (%s)", indent, subChild.Name, subChild.ClassName))
                        if subChild:IsA("GuiObject") and #subChild:GetChildren() > 0 then
                            listChildren(subChild, indent .. "  ")
                        end
                    end
                end
                listChildren(child, "    ")
            end
        else
            -- Not a UUID folder, but let's see what it is
            print(string.format("Non-UUID child in ScrollingFrame: %s (%s)", child.Name, child.ClassName))
        end
    end
    
    return pets
end

-- Function to check for pets that have reached target age
local function checkPetAges()
    print("\n--- CHECKING PET AGES ---")
    local pets = readActivePets()
    
    if #pets == 0 then
        print("No pets found. Make sure your pet menu is open in the game.")
        return {}
    end
    
    for _, pet in pairs(pets) do
        if pet.age >= targetAge then
            local key = pet.uuid .. "_" .. pet.age
            if not lastNotifiedPets[key] then
                lastNotifiedPets[key] = true
                
                local message = string.format("%s (%s) has reached age %d!", pet.name, pet.type, pet.age)
                print("ðŸŽ‰ ALERT: " .. message)
                
                showNotification(message)
            end
        end
    end
    
    return pets
end

-- Function to show notification
function showNotification(message)
    local notification = Instance.new("ScreenGui", game.CoreGui)
    notification.Name = "PetAgeAlert"
    
    local frame = Instance.new("Frame", notification)
    frame.Size = UDim2.fromOffset(500, 120)
    frame.Position = UDim2.new(0.5, -250, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    
    local corner = Instance.new("UICorner", frame)
    corner.CornerRadius = UDim.new(0, 10)
    
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, -20, 1, -20)
    label.Position = UDim2.new(0, 10, 0, 10)
    label.BackgroundTransparency = 1
    label.Text = "ðŸŽ‰ " .. message .. " ðŸŽ‰"
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.TextWrapped = true
    label.Font = Enum.Font.GothamBold
    
    -- Animate in
    frame:TweenPosition(UDim2.new(0.5, -250, 0.15, 0), "Out", "Back", 0.5)
    
    -- Auto-remove
    game:GetService("Debris"):AddItem(notification, 10)
    
    -- Play sound
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxasset://sounds/electronicpingshort.wav"
    sound.Volume = 1
    sound.Parent = game.Workspace
    sound:Play()
    sound.Ended:Connect(function() sound:Destroy() end)
end

-- Create GUI
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.ResetOnSpawn = false
gui.Name = "PetAgeMonitorCorrect"

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.fromOffset(320, 180)
frame.Position = UDim2.new(0.5, -160, 0.3, -90)
frame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
frame.Active = true
frame.Draggable = true

local corner = Instance.new("UICorner", frame)
corner.CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0.25, 0)
title.BackgroundTransparency = 1
title.Text = "Pet Age Monitor"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.GothamBold
title.TextScaled = true

local listButton = Instance.new("TextButton", frame)
listButton.Size = UDim2.new(0.9, 0, 0.18, 0)
listButton.Position = UDim2.new(0.05, 0, 0.3, 0)
listButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
listButton.Text = "List Active Pets"
listButton.TextColor3 = Color3.new(1, 1, 1)
listButton.Font = Enum.Font.GothamBold
listButton.TextScaled = true

local checkButton = Instance.new("TextButton", frame)
checkButton.Size = UDim2.new(0.9, 0, 0.18, 0)
checkButton.Position = UDim2.new(0.05, 0, 0.52, 0)
checkButton.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
checkButton.Text = "Check Ages Now"
checkButton.TextColor3 = Color3.new(1, 1, 1)
checkButton.Font = Enum.Font.GothamBold
checkButton.TextScaled = true

local monitorButton = Instance.new("TextButton", frame)
monitorButton.Size = UDim2.new(0.9, 0, 0.18, 0)
monitorButton.Position = UDim2.new(0.05, 0, 0.74, 0)
monitorButton.BackgroundColor3 = Color3.fromRGB(200, 100, 0)
monitorButton.Text = "Start Monitoring"
monitorButton.TextColor3 = Color3.new(1, 1, 1)
monitorButton.Font = Enum.Font.GothamBold
monitorButton.TextScaled = true

-- Add corners to buttons
for _, button in pairs({listButton, checkButton, monitorButton}) do
    local corner = Instance.new("UICorner", button)
    corner.CornerRadius = UDim.new(0, 4)
end

-- Button events
listButton.MouseButton1Click:Connect(function()
    print("\n=== LISTING ACTIVE PETS ===")
    local pets = readActivePets()
    
    if #pets > 0 then
        for i, pet in pairs(pets) do
            print(string.format("%d. %s (%s) - Age: %d - Mutation: %s - UUID: %s", 
                i, pet.name, pet.type, pet.age, pet.mutation, pet.uuid))
        end
    else
        print("No active pets found. Make sure your pet menu is open in the game.")
    end
    print("=== END LIST ===\n")
end)

checkButton.MouseButton1Click:Connect(function()
    checkPetAges()
end)

monitorButton.MouseButton1Click:Connect(function()
    if not isMonitoring then
        -- Start monitoring
        isMonitoring = true
        monitorButton.Text = "Stop Monitoring"
        monitorButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        
        print(string.format("Started monitoring for pets reaching age %d", targetAge))
        
        local lastCheck = tick()
        monitorConnection = RunService.Heartbeat:Connect(function()
            if tick() - lastCheck >= 10 then -- Check every 10 seconds
                lastCheck = tick()
                checkPetAges()
            end
        end)
    else
        -- Stop monitoring
        isMonitoring = false
        monitorButton.Text = "Start Monitoring"
        monitorButton.BackgroundColor3 = Color3.fromRGB(200, 100, 0)
        
        if monitorConnection then
            monitorConnection:Disconnect()
            monitorConnection = nil
        end
        
        print("Stopped monitoring")
    end
end)

print("Pet Age Monitor loaded with CORRECT PATH!")
print("Path: ActivePetUI â†’ Frame â†’ Main â†’ PetDisplay â†’ ScrollingFrame â†’ UUIDs")
print("Instructions:")
print("1. Open your pet menu in game (make sure ActivePetUI is visible)")
print("2. Click 'List Active Pets' to see current pets and debug info")
print("3. Click 'Start Monitoring' to auto-check every 10 seconds")
print(string.format("Target age: %d", targetAge))

-- Do an initial check after a few seconds
spawn(function()
    wait(3)
    print("\n--- INITIAL CHECK ---")
    checkPetAges()
end)
